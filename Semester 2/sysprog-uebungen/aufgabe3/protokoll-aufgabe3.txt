
░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ javac Stringsort.java

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ java Stringsort 200
Unsortiertes Array:
120 67 126 187 63 73 88 113 160 147 56 156 62 134 72 92 127 81 24 59 70 49 182 14 62 17 97 101 29 159 162 92 2 90 48 4 189 23 151 124 162 35 35 184 98 51 23 92 94 15 116 138 40 197 152 143 24 17 173 68 127 154 11 183 180 192 68 66 113 154 113 107 81 140 62 43 64 61 14 83 119 126 172 103 106 174 40 174 40 35 155 162 190 28 191 34 33 194 189 87 62 100 44 172 47 185 59 142 37 23 147 123 29 155 52 95 184 146 147 169 66 28 60 132 87 96 42 113 181 50 40 130 146 106 83 58 195 30 158 112 61 175 65 129 76 73 127 5 158 139 75 66 75 199 79 85 180 4 72 192 188 158 177 133 167 23 10 120 86 127 84 178 196 135 180 10 193 44 162 102 168 6 102 111 166 32 6 66 146 130 165 139 84 1 83 197 147 73 133 84 
Sortiertes Array:
1 10* 100 101 102* 103 106* 107 11 111 112 113*** 116 119 120* 123 124 126* 127*** 129 130* 132 133* 134 135 138 139* 14* 140 142 143 146** 147*** 15 151 152 154* 155* 156 158** 159 160 162*** 165 166 167 168 169 17* 172* 173 174* 175 177 178 180** 181 182 183 184* 185 187 188 189* 190 191 192* 193 194 195 196 197* 199 2 23*** 24* 28* 29* 30 32 33 34 35** 37 4* 40*** 42 43 44* 47 48 49 5 50 51 52 56 58 59* 6* 60 61* 62*** 63 64 65 66*** 67 68* 70 72* 73** 75* 76 79 81* 83** 84** 85 86 87* 88 90 92** 94 95 96 97 98

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ make
gcc -g -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    stringsort.c   -o stringsort

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ ./stringsort 200
Unsortiertes Array:
24 51 187 65 166 196 169 132 196 85 60 162 197 121 135 25 161 192 197 111 176 124 91 80 180 130 39 172 178 68 166 152 119 103 16 85 98 185 167 43 19 26 4 166 98 90 192 8 31 188 120 6 62 161 87 192 91 76 163 18 144 79 170 63 132 136 98 29 121 64 22 90 40 26 56 88 66 198 97 97 135 167 54 147 127 141 138 17 167 101 186 60 130 155 123 61 91 171 90 162 185 62 1 25 38 7 113 105 155 9 1 90 126 55 36 53 146 125 20 62 25 6 123 155 111 196 15 1 167 55 113 151 117 65 126 155 72 39 9 27 199 11 67 125 16 53 128 113 178 148 175 153 104 97 57 15 93 22 167 9 77 30 110 144 95 36 49 117 25 58 144 23 19 161 98 187 14 25 99 142 124 73 95 178 121 152 193 13 175 110 173 1 90 82 96 185 68 95 101 93 
Sortiertes Array:
1*** 101* 103 104 105 11 110* 111* 113** 117* 119 120 121** 123* 124* 125* 126* 127 128 13 130* 132* 135* 136 138 14 141 142 144** 146 147 148 15* 151 152* 153 155*** 16* 161** 162* 163 166** 167**** 169 17 170 171 172 173 175* 176 178** 18 180 185** 186 187* 188 19* 192** 193 196** 197* 198 199 20 22* 23 24 25**** 26* 27 29 30 31 36* 38 39* 4 40 43 49 51 53* 54 55* 56 57 58 6* 60* 61 62** 63 64 65* 66 67 68* 7 72 73 76 77 79 8 80 82 85* 87 88 9** 90**** 91** 93* 95** 96 97** 98*** 99

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ valgrind ./stringsort 200
==7837== Memcheck, a memory error detector
==7837== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==7837== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==7837== Command: ./stringsort 200
==7837== 
Unsortiertes Array:
17 30 140 134 59 168 75 138 193 31 144 29 108 101 13 54 84 22 168 175 40 15 120 177 61 123 168 53 119 127 115 136 157 4 20 167 122 95 104 114 76 198 93 134 98 106 188 132 78 105 106 69 120 176 45 181 48 12 184 168 89 48 53 197 3 73 163 75 118 66 190 194 63 32 127 111 139 65 42 16 170 98 85 90 24 130 20 72 143 155 190 31 2 43 27 5 66 140 81 185 5 20 128 18 52 5 129 141 70 121 158 190 170 42 29 144 123 0 15 15 155 156 46 157 199 24 113 14 114 144 149 70 114 77 88 116 32 168 57 52 38 165 41 158 6 21 101 79 21 67 94 176 22 91 82 171 65 145 185 179 88 134 48 152 161 87 68 143 54 75 195 42 39 186 0 196 6 51 75 178 118 169 153 140 9 35 60 74 180 196 53 18 129 51 120 39 138 138 132 142 
Sortiertes Array:
0* 101* 104 105 106* 108 111 113 114** 115 116 118* 119 12 120** 121 122 123* 127* 128 129* 13 130 132* 134** 136 138** 139 14 140** 141 142 143* 144** 145 149 15** 152 153 155* 156 157* 158* 16 161 163 165 167 168**** 169 17 170* 171 175 176* 177 178 179 18* 180 181 184 185* 186 188 190** 193 194 195 196* 197 198 199 2 20** 21* 22* 24* 27 29* 3 30 31* 32* 35 38 39* 4 40 41 42** 43 45 46 48** 5** 51* 52* 53** 54* 57 59 6* 60 61 63 65* 66* 67 68 69 70* 72 73 74 75*** 76 77 78 79 81 82 84 85 87 88* 89 9 90 91 93 94 95 98*
==7837== 
==7837== HEAP SUMMARY:
==7837==     in use at exit: 0 bytes in 0 blocks
==7837==   total heap usage: 203 allocs, 203 frees, 5,399 bytes allocated
==7837== 
==7837== All heap blocks were freed -- no leaks are possible
==7837== 
==7837== For lists of detected and suppressed errors, rerun with: -s
==7837== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ make cppcheck
cppcheck --enable=warning,style --std=c11 stringsort.c
Checking stringsort.c ...
stringsort.c:20:26: style: Parameter 'argv' can be declared as const array [constParameter]
int main(int argc, char *argv[]) {
                         ^
Active checkers: 106/565

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ ./stringsort 0
Anzahl muss midestens 1 sein
░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ ./stringsort 1
Unsortiertes Array:
1 
Sortiertes Array:
1

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ ./stringsort 2
Unsortiertes Array:
0 1 
Sortiertes Array:
0 1

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ ./stringsort 20
Unsortiertes Array:
16 11 8 17 5 1 16 4 0 12 17 19 18 6 6 3 4 6 19 15 
Sortiertes Array:
0 1 11 12 15 16* 17* 18 19* 3 4* 5 6** 8

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ ./stringsort 200
Unsortiertes Array:
122 188 36 123 119 64 90 9 1 17 44 183 145 186 16 41 65 111 168 146 150 100 180 137 61 75 76 88 198 71 179 69 8 14 143 77 28 32 87 181 49 131 163 144 66 129 135 131 39 102 77 189 2 56 125 13 81 152 102 28 22 30 98 182 44 40 58 23 22 95 3 21 176 166 166 41 44 100 123 83 2 200 71 155 5 146 118 37 97 170 65 70 200 113 1 195 103 9 17 125 105 171 147 30 86 112 22 130 11 145 12 164 94 33 118 49 129 36 86 177 5 152 197 5 64 198 150 168 6 167 42 61 137 189 92 173 50 114 102 12 58 64 176 152 97 94 0 176 80 37 152 85 139 98 40 153 95 140 70 102 106 113 163 193 51 4 165 102 118 16 114 126 80 89 77 127 133 28 103 12 15 4 48 154 103 38 106 148 179 177 200 34 89 113 178 140 117 142 192 35 
Sortiertes Array:
0 1* 100* 102**** 103** 105 106* 11 111 112 113** 114* 117 118** 119 12** 122 123* 125* 126 127 129* 13 130 131* 133 135 137* 139 14 140* 142 143 144 145* 146* 147 148 15 150* 152*** 153 154 155 16* 163* 164 165 166* 167 168* 17* 170 171 173 176** 177* 178 179* 180 181 182 183 186 188 189* 192 193 195 197 198* 2* 200** 21 22** 23 28** 3 30* 32 33 34 35 36* 37* 38 39 4* 40* 41* 42 44** 48 49* 5** 50 51 56 58* 6 61* 64** 65* 66 69 70* 71* 75 76 77** 8 80* 81 83 85 86* 87 88 89* 9* 90 92 94* 95* 97* 98*

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ make TARGET=stringsort-optimiert
gcc -g -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    stringsort-optimiert.c   -o stringsort-optimiert

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ make TARGET=stringsort-optimiert cppcheck
cppcheck --enable=warning,style --std=c11 stringsort-optimiert.c
Checking stringsort-optimiert.c ...
stringsort-optimiert.c:9:26: style: Parameter 'argv' can be declared as const array [constParameter]
int main(int argc, char *argv[]) {
                         ^
Active checkers: 106/565

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ ./stringsort-optimiert 200
Unsortiertes Array:
60 169 7 114 34 194 198 102 26 195 29 166 46 167 152 127 6 46 62 13 5 87 179 106 178 87 116 86 183 163 68 43 84 76 109 118 22 59 172 48 54 154 167 101 121 119 28 79 117 42 92 123 129 71 181 60 110 97 98 93 60 166 88 145 194 149 15 16 9 140 17 63 94 184 116 167 103 96 47 21 138 139 96 68 163 77 80 73 175 178 119 187 96 159 84 91 109 52 107 70 192 124 133 38 108 2 5 12 98 52 185 37 192 81 57 107 158 137 180 85 67 51 25 163 11 109 54 72 161 162 142 105 86 27 143 195 29 149 159 128 153 96 165 97 177 22 4 87 111 137 125 178 188 150 141 151 11 196 175 125 110 117 30 196 97 174 143 126 75 54 54 28 150 171 126 127 145 130 167 56 19 92 186 160 194 128 63 5 76 39 130 186 156 113 134 5 39 78 132 114 60 

Sortiertes Feld:
101 102 103 105 106 107* 108 109** 11* 110* 111 113 114* 116* 117* 118 119* 12 121 123 124 125* 126* 127* 128* 129 13 130* 132 133 134 137* 138 139 140 141 142 143* 145* 149* 15 150* 151 152 153 154 156 158 159* 16 160 161 162 163** 165 166* 167*** 169 17 171 172 174 175* 177 178** 179 180 181 183 184 185 186* 187 188 19 192* 194** 195* 196* 198 2 21 22* 25 26 27 28* 29* 30 34 37 38 39* 4 42 43 46* 47 48 5*** 51 52* 54*** 56 57 59 6 60** 62 63* 67 68* 7 70 71 72 73 75 76* 77 78 79 80 81 84* 85 86* 87** 88 9 91 92* 93 94 96*** 97** 98*

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ valgrind ./stringsort-optimiert 200
==8456== Memcheck, a memory error detector
==8456== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==8456== Using Valgrind-3.21.0 and LibVEX; rerun with -h for copyright info
==8456== Command: ./stringsort-optimiert 200
==8456== 
Unsortiertes Array:
188 115 113 164 78 104 63 88 113 195 191 75 175 192 87 193 118 107 143 186 188 76 158 129 26 164 103 111 138 54 138 79 170 3 195 48 60 59 88 173 6 79 0 181 71 39 127 142 98 70 128 39 98 86 168 125 2 24 188 92 78 126 171 48 81 167 48 141 178 137 66 184 168 18 118 192 58 197 134 156 67 62 195 118 100 116 195 54 140 183 146 170 61 118 19 142 37 19 36 15 108 54 151 77 73 69 69 83 18 3 191 86 17 139 156 69 55 151 123 147 134 69 117 147 139 88 41 176 60 77 143 168 132 47 197 157 68 66 40 87 21 183 125 190 122 81 11 177 32 86 76 118 156 194 65 47 34 106 176 94 184 71 63 68 118 60 25 187 79 17 26 52 0 151 43 123 32 54 52 16 141 129 134 49 75 199 48 109 105 24 156 41 96 171 109 166 31 86 105 62 188 

Sortiertes Feld:
0* 100 103 104 105* 106 107 108 109* 11 111 113* 115 116 117 118***** 122 123* 125* 126 127 128 129* 132 134** 137 138* 139* 140 141* 142* 143* 146 147* 15 151** 156*** 157 158 16 164* 166 167 168** 17* 170* 171* 173 175 176* 177 178 18* 181 183* 184* 186 187 188** 19* 190 191* 192* 193 194 195*** 197* 199 2 21 24* 25 26* 3* 31 32* 34 36 37 39* 40 41* 43 47* 48*** 49 52* 54*** 55 58 59 6 60** 61 62* 63* 65 66* 67 68* 69*** 70 71* 73 75* 76* 77* 78* 79** 81* 83 86*** 87* 88** 92 94 96 98*
==8456== 
==8456== HEAP SUMMARY:
==8456==     in use at exit: 0 bytes in 0 blocks
==8456==   total heap usage: 4 allocs, 4 frees, 2,628 bytes allocated
==8456== 
==8456== All heap blocks were freed -- no leaks are possible
==8456== 
==8456== For lists of detected and suppressed errors, rerun with: -s
==8456== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ time ./stringsort 20000 > /dev/null

real    0m2,402s
user    0m2,397s
sys     0m0,004s

░▒▓   …/HTWG/sysprog-uebungen/aufgabe3   main !+?  
❯ time ./stringsort-optimiert 20000 > /dev/null

real    0m2,494s
user    0m2,488s
sys     0m0,007s
